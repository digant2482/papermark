datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_PRISMA_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime   @default(now())
  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  dataroom       Dataroom[]
  domains        Domain[]
  plan           String     @default("trial")
  stripeId       String?    @unique // Stripe subscription / customer ID
  subscriptionId String?    @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String            @id @default(cuid())
  name        String
  description String?
  file        String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type        String? // This should be a reference to the file type (pdf, docx, etc.)
  numPages    Int? // This should be a reference to the number of pages in the document
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String // This field holds the foreign key.
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  links       Link[]
  views       View[]
  versions    DocumentVersion[]
  authenticationCodes AuthenticationCode[]
}

model DocumentVersion {
  id            String         @id @default(cuid())
  versionNumber Int // e.g., 1, 2, 3 for version control
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  file          String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type          String? // This should be a reference to the file type (pdf, docx, etc.)
  numPages      Int? // This should be a reference to the number of pages in the document
  isPrimary     Boolean        @default(false) // Indicates if this is the primary version
  pages         DocumentPage[]
  hasPages      Boolean        @default(false) // Indicates if the document has pages
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([versionNumber, documentId])
}

model DocumentPage {
  id         String          @id @default(cuid())
  version    DocumentVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId  String
  pageNumber Int // e.g., 1, 2, 3 for 
  file       String // This should be a reference to where the file / page is stored (S3, Google Cloud Storage, etc.)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([pageNumber, versionId])
}

model Link {
  id             String    @id @default(cuid())
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     String
  url            String?   @unique
  name           String? // Link name
  slug           String? // Link slug for pretty URLs
  expiresAt      DateTime? // Optional expiration date
  password       String? // Optional password for link protection
  allowedEmails  String[] // Array of emails allowed to view the document
  emailProtected Boolean   @default(true) // Optional email protection
  allowDownload  Boolean?  @default(false) // Optional give user a option to allow to download the document
  isArchived     Boolean   @default(false) // Indicates if the link is archived
  views          View[]
  domain         Domain?   @relation(fields: [domainId], references: [id], onDelete: SetNull)
  domainId       String? // This can be nullable, representing links without custom domains
  domainSlug     String? // This will store the domain's slug even if the domain is deleted
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([domainSlug, slug])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  verified    Boolean  @default(false) // Whether the domain has been verified
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  links       Link[] // links associated with this domain
}

model View {
  id          String   @id @default(cuid())
  link        Link     @relation(fields: [linkId], references: [id])
  linkId      String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  viewerEmail String? // Email of the viewer if known
  viewedAt    DateTime @default(now())
}

enum DataroomType {
  HIERARCHICAL
  PAGED
}

model Dataroom {
  id               String            @id @default(cuid())
  name             String
  type             DataroomType
  description      String?
  emailProtected   Boolean           @default(true) // Optional email protection
  password         String? // Optional password for link protection
  isArchived       Boolean           @default(false) // Indicates if the dataroom is archived
  owner            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String // This field holds the foreign key.
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  files            DataroomFile[]
  folders          DataroomFolder[]
  dataroomView     DataroomView[]
  authenticationCodes AuthenticationCode[]
}

model DataroomView {
  id                      String                @id @default(cuid())
  dataroom                Dataroom              @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  dataroomId              String
  viewerEmail             String?               // Email of the viewer if known
  viewedAt                DateTime              @default(now())
}

model DataroomFolder {
  id               String            @id @default(cuid())
  name             String
  parentFolder     DataroomFolder?   @relation(name: "nestedFolders", fields: [parentFolderId], references: [id],onDelete: Cascade)
  subfolders       DataroomFolder[]  @relation(name: "nestedFolders")
  parentFolderId   String?           
  dataroom         Dataroom          @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  dataroomId       String
  files            DataroomFile[]
}

model DataroomFile {
  id                           String                 @id @default(cuid())
  name                         String
  url                          String
  parentFolder                 DataroomFolder?        @relation(fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId               String?
  dataroom                     Dataroom               @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  dataroomId                   String
}

model AuthenticationCode {
  id          String   @id @default(cuid())
  email       String
  code        String   @unique
  dataroom    Dataroom?  @relation(fields: [identifier], references: [id], onDelete: Cascade, map: "dataroom_relation")
  document    Document?  @relation(fields: [identifier], references: [id], onDelete: Cascade, map: "document_relation")
  identifier  String   //DataroomId if dataroom else documentId
  permanent   Boolean  @default(false)
  createdAt   DateTime @default(now())
}